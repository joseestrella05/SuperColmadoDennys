@page "/Compra/Index"
@using Microsoft.AspNetCore.Authorization
@inject ProvedoreServices provedoresService
@inject CompraServices compraService
@inject EstadoServices estadoService
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject ToastService toastService
@attribute [Authorize(Roles = "Admin")]


<PageTitle>Compra</PageTitle>
<div class="row" style="background-color:white; padding:10px; margin:10px;">
	<div class="col">
		<div class="text-left">
			<h2 class="text-black"><i class="bi bi-bag-fill m-1"></i> Compra</h2>
		</div>
	</div>
	<div class="col text-end">
		<a href="/Compra/Create" class="btn btn-secondary">Crear nuevo compra</a>
	</div>
</div>

<div class="container">
	<div class="card">
		<div class="card-body" style="padding: 20px;">
			<div class="row">
				<div class="col-4">
					<div class="input-group" style="width: 250px">
						<div class="form-floating">
							<InputSelect class="form-select" id="floatingSelect" aria-label="Floating label select example" @bind-Value="@valorFiltro">
								<option value="" selected disabled>--- Selecciona ---</option>
								<option value="id">CompraId</option>
								<option value="Proveedor">Proveedor</option>
							</InputSelect>
							<label for="floatingSelect"><strong>Filtrar en base a...</strong></label>
						</div>
						<button type="button" class="btn btn-secondary bi bi-arrow-counterclockwise" @onclick="() => Restablecer()"></button>
					</div>
				</div>

				<div class="col">
					<div class="input-group" style="width: 500px">
						<div class="form-floating d-flex align-items-center">
							<InputText @bind-Value="@searchBarValue" class="form-control" placeholder="" id="floatingSearch" />
							<label for="floatingSearch">Buscar</label>
						</div>
						<button @onclick="Buscar" class="btn btn-secondary bi bi-search" type="button"></button>
					</div>
				</div>
			</div>

			<div style="overflow-x: auto;">
				<table class="table table-light table-hover" style="min-width: 100%;">
					<thead class="table table-striped">
						<tr class="text-center">
							<th>ID</th>
							<th>Provedor</th>
							<th>Fecha</th>
							<th>Estado</th>
							<th>Monto</th>
							<th>Acciones</th>
						</tr>
					</thead>

					<tbody>
						@foreach (var compras in ListaCompra)
						{
							var provedor = ListaProvedores.FirstOrDefault(t => t.ProvedorId == compras.ProvedorId);
							var estado = ListaEstados.FirstOrDefault(c => c.EstadoId == compras.EstadoId);
							<tr class="text-center">
								<td>@compras.CompraId</td>
								<td>@(provedor?.Nombre ?? "no encontrado")</td>
								<td>@compras.Fecha.ToString("dd/mm/yyyy")</td>
								<td>@(estado?.Nombre ?? "no encontrado")</td>
								<td>@compras.Total</td>
								<td class="text-center" style="display: flex; justify-content: center; gap: 5px;">
									<a href="/Compra/Edit/@compras.CompraId" class="btn btn-outline-info bi bi-pencil-square"></a>
									<button type="button" @onclick="() => MostrarModal(compras.CompraId, compras.Descripcion)" class="btn btn-outline-danger bi bi-trash"></button>
								</td>
							</tr>
						}
					</tbody>
					<caption>Cant. De compra: @ListaCompra.Count</caption>
				</table>
			</div>
		</div>
	</div>
</div>



@if (mostrarModal)
{
	<div class="modal fade show" tabindex="-1" style="display: block;" aria-modal="true" role="dialog">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header" style="background-color: #7B0323; color: white;">
					<h5 class="modal-title">Eliminar Provedor</h5>
					<button type="button" class="btn-close" @onclick="CerrarModal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<p>¿Está seguro de que desea eliminar a este Provedor?</p>
					<p>Esta opción no se puede deshacer.</p>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
					<button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
				</div>
			</div>
		</div>
	</div>
	<div class="modal-backdrop fade show" @onclick="CerrarModal"></div>
}


@code {
	[Parameter]
	public int IdSeleccionado { get; set; }
	public string searchBarValue { get; set; } = string.Empty;
	public string valorFiltro { get; set; } = string.Empty;
	public List<Provedores> ListaProvedores { get; set; } = new List<Provedores>();
	public List<Compras> ListaCompra { get; set; } = new List<Compras>();
	public Compras compra { get; set; } = new Compras();
	public List<Estados> ListaEstados { get; set; } = new List<Estados>();
	private bool mostrarModal = false;
	private string ProvedorSelecionado { get; set; } = "";

	public ToastType TipoNotificacion { get; set; }
	public string MensajeNotificacion { get; set; } = string.Empty;
	public string TituloNotificacion { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		ListaProvedores = await provedoresService.Listar(C => true);
		ListaCompra = await compraService.Listar(C => true);
		ListaEstados = await estadoService.Listar(C => true);
	}

	private void MostrarModal(int compraId, string Provedor)
	{
		IdSeleccionado = compraId;
		ProvedorSelecionado = Provedor;
		mostrarModal = true;
	}

	private void CerrarModal()
	{
		mostrarModal = false;
		IdSeleccionado = 0;
		ProvedorSelecionado = "";
	}

	private async Task Buscar()
	{
		if (!string.IsNullOrWhiteSpace(valorFiltro))
		{
			if (valorFiltro == "id" && int.TryParse(searchBarValue, out int compraId))
			{
				// Filtrar por CompraId
				ListaCompra = await compraService.Listar(c => c.CompraId == compraId);
			}
			else if (valorFiltro == "Proveedor")
			{
				// Filtrar por Proveedor
				var proveedoresFiltrados = ListaProvedores
					.Where(p => p.Nombre.Contains(searchBarValue, StringComparison.OrdinalIgnoreCase))
					.Select(p => p.ProvedorId)
					.ToList();

				ListaCompra = await compraService.Listar(c => proveedoresFiltrados.Contains(c.ProvedorId));
			}
			else
			{
				// Mostrar mensaje de error si el ID no es válido
				TipoNotificacion = ToastType.Warning;
				TituloNotificacion = "Advertencia";
				MensajeNotificacion = "Por favor ingrese un criterio de búsqueda válido.";
				MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
			}
		}
		else
		{
			// Si no se selecciona filtro o el valor es vacío, mostrar todas las compras
			ListaCompra = await compraService.Listar(c => true);
		}
	}



	public async Task Eliminar()
	{
		try
		{
			await compraService.Eliminar(IdSeleccionado);
			ListaCompra = await compraService.Listar(x => true);  // ACTUALIZA ListaCompra
			mostrarModal = false;
			IdSeleccionado = 0;
			TipoNotificacion = ToastType.Success;
			TituloNotificacion = "Enhorabuena";
			MensajeNotificacion = "¡Se ha eliminado exitosamente!";
			MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
		}
		catch (Exception ex)
		{
			TipoNotificacion = ToastType.Danger;
			TituloNotificacion = "Error";
			MensajeNotificacion = "Hubo un error al eliminar la compra.";
			MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
		}
	}


	public void MostrarToast(ToastType tipo, string titulo, string cuerpo)
	=> toastService.Notify(new(tipo, titulo, cuerpo));

	public async Task Restablecer()
	{
		ListaProvedores = await provedoresService.Listar(x => true);
		searchBarValue = string.Empty;
		valorFiltro = string.Empty;

		TipoNotificacion = ToastType.Info;
		TituloNotificacion = "Aviso";
		MensajeNotificacion = "Se han restablecido los criterios de búsqueda.";
		MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
	}
}