@page "/Pedido/Index"
@rendermode InteractiveServer
@inject OrdenesService ordenesService
@inject UsersServices usersService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Pedido</PageTitle>

<div class="container">
    <div class="card shadow-lg">
        <div class="card-header text-center">
            <h3><strong>Órdenes</strong></h3>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-3">
                    <label class="form-label" for="Filtro"><strong>Filtrar por</strong></label>
                </div>
                <div class="col-4">
                    <label class="form-label" for="ValorFiltro"><strong>Búsqueda</strong></label>
                </div>
            </div>
            <div class="row">
                <div class="col-3">
                    <InputSelect class="form-select" @bind-Value="Filtro">
                        <option value="">Elija una opción</option>
                        <option value="ID">Id</option>
                        <option value="nombreCliente">Nombre del Cliente</option>
                    </InputSelect>
                </div>
                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                    </div>
                </div>
                <div class="col-auto">
                    <button type="button" class="btn btn-outline-secondary bi bi-arrow-counterclockwise" @onclick="Restablecer"></button>
                </div>
            </div>
            <div class="text-center mt-3">
                <table class="table table-striped table-borderless table-primary">
                    <thead>
                        <tr class="bg-warning">
                            <th>OrdenId</th>
                            <th>Nombre Cliente</th>
                            <th>Fecha</th>
                            <th>Telefono</th>
                            <th>Monto</th>
                            <th>Estado</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var orden in Ordenes)
                        {
                            <tr>
                                <td>@orden.OrdenId</td>
                                <td>@orden.NombreCliente</td>
                                <td>@orden.Fecha.ToString("dd/MM/yyyy")</td>
                                <td>@orden.Telefono</td>
                                <td>@orden.Monto.ToString("N2")</td>
                                <td>@GetEstadoNombre(orden.EstadoId)</td>
                                <td>
                                    <AuthorizeView Roles="Admin">
                                        <Authorized>
                                            <InputSelect class="form-select" @bind-Value="orden.EstadoId" @onchange="async (e) => await CambiarEstado(orden.OrdenId, int.Parse(e.Value.ToString()))">
                                                <option value="1">Pendiente</option>
                                                <option value="2">Preparando</option>
                                                <option value="3">YA ESTA LISTA!!</option>
                                                <option value="4">Cancelado</option>
                                            </InputSelect>
                                        </Authorized>
                                    </AuthorizeView>
                                    <button class="btn btn-primary" @onclick="() => MostrarModalVer(orden)">Ver</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@* Modal de Detalle de Orden *@
<div class="modal fade" id="modalVer" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="modalVerLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalVerLabel">Detalle de la Orden</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (OrdenSeleccionada != null)
                {
                    <div>
                        <h6><strong>Detalles de Productos:</strong></h6>
                        <ul>
                            @foreach (var detalle in OrdenSeleccionada.OrdenesDetalle)
                            {
                                <li>@detalle.Producto?.Nombre - Cantidad: @detalle.Cantidad - Monto: @((detalle.Cantidad * detalle.Precio).ToString("N2"))</li>
                            }
                        </ul>
                    </div>
                }
                else
                {
                    <p>Cargando...</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

@if (modalVer)
{
    <script>
        var myModal = new bootstrap.Modal(document.getElementById('modalVer'));
        myModal.show();
    </script>
}

@code {
    public List<Ordenes> Ordenes { get; set; } = new List<Ordenes>();
    public string? Filtro { get; set; }
    public string? ValorFiltro { get; set; }
    public Ordenes? OrdenSeleccionada { get; set; }
    public bool modalVer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CargarOrdenes();
    }

    private async Task CargarOrdenes()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var appUser = await usersService.GetObject(user.Identity.Name);
            if (user.IsInRole("Admin"))
            {
                Ordenes = await ordenesService.GetAllObject();
            }
            else if (user.IsInRole("Cliente") && appUser != null)
            {
                Ordenes = await ordenesService.GetObjectByCondition(o => o.ClienteId == appUser.Id);
            }
        }
    }

    private async Task Buscar()
    {
        if (string.IsNullOrEmpty(Filtro) || string.IsNullOrEmpty(ValorFiltro))
        {
            await CargarOrdenes();
            return;
        }

        switch (Filtro)
        {
            case "ID":
                if (int.TryParse(ValorFiltro, out int id))
                {
                    Ordenes = await ordenesService.GetObjectByCondition(o => o.OrdenId == id);
                }
                break;
            case "nombreCliente":
                Ordenes = await ordenesService.GetObjectByCondition(o => o.NombreCliente.Contains(ValorFiltro, StringComparison.OrdinalIgnoreCase));
                break;
        }
    }

    private async Task Restablecer()
    {
        await CargarOrdenes();
        Filtro = string.Empty;
        ValorFiltro = string.Empty;
    }

    private void MostrarModalVer(Ordenes orden)
    {
        OrdenSeleccionada = orden;
        modalVer = true;
    }

    private string GetEstadoNombre(int estadoId)
    {
        return estadoId switch
        {
            1 => "Pendiente",
            2 => "Preparando",
            3 => "YA ESTA LISTA!!",
            4 => "Cancelado",
            _ => "Desconocido"
        };
    }

    private async Task CambiarEstado(int ordenId, int nuevoEstadoId)
    {
        var orden = await ordenesService.GetObject(ordenId);
        if (orden != null)
        {
            orden.EstadoId = nuevoEstadoId;
            await ordenesService.UpdateObject(orden);
            await CargarOrdenes();
        }
    }
}