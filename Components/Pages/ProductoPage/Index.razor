@page "/Producto/Index"
@inject NavigationManager NavigationManager
@inject ProductoService productoService
@inject CategoriaService categoriaService
@inject ToastService toastService


<PageTitle>Producto</PageTitle>
<div class="container">
    <div class="card shadow-lg">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title m-0">Registro de Producto</h5>
            <a href="/Producto/Create" class="btn btn-primary">
                <span class="bi bi-plus-square"></span> Crear
            </a>
        </div>

        <div class="card-body">
            @*labels*@
            <div class="row">
                @*Filtrar por*@
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                </div>
                @*ValorFiltro*@
                <div class="col-4">
                    <label class="col-form-label"><strong>Búsqueda</strong></label>
                </div>
                <div class="col-2">
                    <label class="col-form-label"><strong>Desde</strong></label>
                </div>
                <div class="col-2">
                    <label class="col-form-label"><strong>Hasta</strong></label>
                </div>
                <div class="col-1">
                    <button type="button" class="btn btn-outline-secondary bi bi-arrow-counterclockwise"
                    @onclick="Restablecer">
                    </button>
                </div>

            </div>

        </div>

        @*Inputs y botones*@
        <div class="row align-items-center">
            @*filtro*@
            <div class="col-3">
                <InputSelect class="form-select" @bind-Value="Filtro">
                    <option value="" selected disabled>Elija una opción</option>
                    <option value="ID">ProductoId</option>
                    
                </InputSelect>
            </div>

            @*Busqueda*@
            <div class="col-4">
                <div class="input-group">
                    <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                    <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                </div>
            </div>
           

        <table class="table table-hover table-bordered text-center">
            <thead class="table  table-striped text-black">
                <tr>
                    <th>Id</th>
                    <th>Nombres</th>
                    <th>Precio</th>
                    <th>Stock</th>
                    <th>Codigo barra</th>
                    <th>Estado</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var producto in Listaproductos)
                {
                    <tr>
                        <td>@producto.Id</td>
                        <td>@producto.Nombre</td>
                        <td>@producto.Precio.ToString("n2")</td>
                        <td>@producto.Stock</td>
                        <td>@producto.CodigoBarras</td>
                        <td>@producto.EstaActivo</td>
                        <td>
                            <a href="/Producto/Edit/@producto.Id" class="btn btn-outline-primary bi bi-pencil-square"></a>
                                <button type="button" @onclick="() => MostrarModal(producto.Id, producto.Nombre)" class="btn btn-outline-danger bi bi-trash"></button>
                        </td>
                        
                    </tr>
                }
            </tbody>
        </table>

        <div class="card-footer space-between">
            <label><strong>Total: @Listaproductos.Count </strong></label>
        </div>
    </div>
</div>
</div>


@if (mostrarModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block;" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #7B0323; color: white;">
                    <h5 class="modal-title">Eliminar</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro de que desea eliminar este producto?</p>
                    <p>Esta opción no se puede deshacer.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show" @onclick="CerrarModal"></div>
}


@code {
    public List<Productos> Listaproductos { get; set; } = new List<Productos>();
    public string? Filtro { get; set; }
    public string? ValorFiltro { get; set; }
    public List<Categoria> Categorias { get; set; } = new List<Categoria>();
    public int SelectedCategoriaId { get; set; }
    private bool mostrarModal = false;
    private int IdSeleccionado { get; set; }
    public ToastType TipoNotificacion { get; set; }
    public string MensajeNotificacion { get; set; } = string.Empty;
    public string TituloNotificacion { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Listaproductos = await productoService.ListarProducto();
        Categorias = await categoriaService.ListarCategoriasAsync();
    }

    public async Task Buscar()
    {
        if (Filtro == null)
        {
            StateHasChanged();
            await Task.Delay(3000);
            return;
        }

        switch (Filtro)
        {
            case "ID":
                if (int.TryParse(ValorFiltro, out int id))
                {
                    var buscarId = Listaproductos.Where(c => c.Id == id).FirstOrDefault();
                    if (buscarId != null)
                    {
                        Listaproductos.Clear();
                        Listaproductos.Add(buscarId);
                        TituloNotificacion = " ";
                        MensajeNotificacion = "¡No se encontraron producto";
                        MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
                    }
                    else
                    {
                        TituloNotificacion = " ";
                        MensajeNotificacion = "¡No se encontraron resultado";
                        MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
                    }
                }
                else
                {
                    TituloNotificacion = " ";
                    MensajeNotificacion = "¡El valor ingresado para ProductoId no es válido";
                    MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
                }
                StateHasChanged();
                break;

           
        }
    }

    private void MostrarModal(int id, string nombre)
    {
        IdSeleccionado = id;
        mostrarModal = true;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        IdSeleccionado = 0;
       
    }

    public async Task Eliminar()
    {
        try
        {
            await productoService.Eliminar(IdSeleccionado);
            Listaproductos = await productoService.Listar(x => true); 
            mostrarModal = false;
            IdSeleccionado = 0;
            TipoNotificacion = ToastType.Success;
            TituloNotificacion = "Enhorabuena";
            MensajeNotificacion = "¡Se ha eliminado exitosamente!";
            MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
        }
        catch (Exception ex)
        {
            TipoNotificacion = ToastType.Danger;
            TituloNotificacion = "Error";
            MensajeNotificacion = "Hubo un error al eliminar la cuenta.";
            MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
        }
    }

    public void MostrarToast(ToastType tipo, string titulo, string cuerpo)
        => toastService.Notify(new(tipo, titulo, cuerpo));

    private async Task Restablecer()
    {
        Listaproductos = await productoService.ListarProducto();
        Categorias = await categoriaService.ListarCategoriasAsync();
        Filtro = string.Empty;
        ValorFiltro = string.Empty;
    }
}
